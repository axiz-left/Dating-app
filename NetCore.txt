The ConfigureServices in startup.cs is a DI container where one can globally inject classes to the application. No specific order to write this.
The Configure in startup.cs is to add middelware to HTTP request pipeline, there is specific order to write this as it involves entering and exiting from pipeline.
The endpoint middleware is to map the routes as endpoints.(e.g. MapControllers middleware is to automaticall map all the http actions in controllers as endpoints)
Asynchronous - Passes the task from main thread to another thread and continues when the task thread returns not blocking the initial main thread.
Data Transfer Objects (DTO) - are classes which contains only the required fields needed to pass data from view/api in an application.
Entity Framework uses conventions, so if a field is named Id and type as integer , entity framework will automaticaly recognize it and mark it as incrementing Id field in database.
Asp.net core identity uses camelcasing by default for UserName field , so declare it in camel casing otherwise we need to do quite a lot of refactoring to make it work.
ApiController attrubute takes care of automatic model binding, we need not specify [From] etc in the method parameters. APICOntroller will auto assign the request parameters to the method parameters. Also if a data model or dto property has data annotations, ApiController will take care of data validation of properties during request.
When we are storing passwords in database it is a good idea to hash the password stored. But hashing only is not safe since the hash will be same for all the same passwords and if two users has a same password hacking one hash could reveal the other. SO instead of just using a hash , we use a salt key to encrypt the hash password. This saltkey is different for each user and creates different hashes for same password too.
.NET core uses HmacSha512 encryption class to hash the password with a salt key.

JWT Tokens - is used to authenticate to an API or Application
JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. 
This information can be verified and trusted because it is digitally signed.
This contains information about credentials,claims and other information.
It can be signed using a secret(with HMAC algorithm) or with a public/private key like RSA or ECDSA.
JWTs can be encrypted to also provide secrecy between parties. 
Signed tokens can verify the integrity of the claims contained within it, while encrypted tokens hide those claims from other parties. 
When tokens are signed using public/private key pairs, the signature also certifies that only the party holding the private key is the one that signed it.

Token is a string divided into 3 parts seperated by a period
Header - Mentions the algorithm that encrypts the signature part of the token and type of the token which is jwt. This is then base64 encoded.
Payload - Contains the data for the token which contains claims. The payload can contain registered,public and private types(more info in jwt.io). it contains user claims, predefined claims, token start date, expiry date and issue date etc... This is then base64 encoded.
Signature -  The signature is created using the encoded header+ encoded payload+ a secret. This is then encrypted by the algorithm mentioned in header. This secret never leaves the server. This can only decoded by the server with the secret. The token wont be validated if it is tampered.
The header and payload can be easily obtained by decoding the token as they are base64 encoded.
In the case of tokens signed with a private key, it can also verify that the sender of the JWT is who it says it is.
Do not put secret information in the payload or header elements of a JWT unless it is encrypted.

Whenever the user wants to access a protected route or resource, the user agent should send the JWT, typically in the Authorization header using the Bearer schema.
The content of the header should look like the following:
Authorization: Bearer <token>
This can be, in certain cases, a stateless authorization mechanism. The server's protected routes will check for a valid JWT in the Authorization header, and if it's present, the user will be allowed to access protected resources.
If the token is sent in the Authorization header, Cross-Origin Resource Sharing (CORS) won't be an issue as it doesn't use cookies.

How JWT authentication Works
Client application will be sending a username and password to the server.
Server will verify that and send a jwt token.
client stores it in session or local storage.
client then sends this token with every request to access any protected resource in server in an Authorization request header.
server will then take a look at the token and check whether the token is valid, the server which has assigned the token will have access to the secret/private key stored on the server and it will be able to verify the token is valid.
if valid it sends back response.

Benefits of JWT
No session to manage - JWT tokens are self conatined
Portable - A single token can be used with multiple backends that share the same private key
Nocookies required -mobile friendly
Performance - once token is issued, no need to make any database request to verify users authentication

Interface
A contract between itself and a class that implements it that the class will implement all its properties, methods and events. It does not contain any implementation and only contains signatures

Service Injection
AddSingleton - instantiates when an app is created and destroyed when app is ended.
AddScoped - This is scoped to the lifetime of the http request. Instantiates when a request is called and ends when request is completed. This is appropriate for web apps /http request.
AddTransient - This is created aand destroyed as soon as the method is finished. Not right for Http

SymmetricSecurityKey - Where one pair of key is used to sign and validate. USed by JWT.
ASymmetricSecurityKey - where two pair of keys is used, one public and private is used to encrypt and decrypt. Used by https, ssl etc..

Repository Pattern
Encapsulates the logic - decouples the application from the persistent framework
Reduces duplicate query logic as all queries as centralized to methods and the methods can be used by consumers instead of writing the query logic
Testability
Allows to change ORm easily
Disadvantage - 
Abstraction of an Abstraction - Entity frameowrk is an abstarction of database and repository is abstraction of entity framework
Each root entitiy should have its own repository which means more code
need to implement unitofwork pattern to cnntrol transactions

Automapper
Map dtos to db objects


Entity Framework Conventions
-If a related table is there add the table object to the parent class and the parent object to related class. This creates a circular refernce but it makes the fkid not nullable and makees the data is fktable to be dleted along with parent table data.