index.html is the single page from where angular is bootstrapped.
it contains a app component selector called <app-root> which is defined in the file app.component.ts.
The app.component.ts contains the Component decorator which specifies that this is a angular component and it has the selector name, the html and css template to be used for the selector.
It also contains the app component class which can be used to aadd logic to send data to the template view.
The app.module.ts is the file which angular uses to declare/add new componenets to the angular module and bootstrap the angular main component. This wil be one in the application and it specifies the components that needs to be added under the ngmodules decorator. It also contains references to adding external modules to the application and the start up compoenent to be bootstrapped when app launches.
The main.ts is the file is which the angular cli uses when starting the application to bootstrap the app module and then inturn load the components specified in it.

Components get destroyed when we move from one component to another.

Angular Services are Singleton classes which can be injected as dependencies to components and it gets destroyed when we close the browser or move away from the application.
Services has a decorator @Injectable, it also has an attribute 'ProvidedIn:root' which automatically adds the service to the app module providers list. 

if a module is imported with forRoot() method in app.module, it means it loads all the services it needs in the root module

tsconfig.json is the configuration file for typescript.

angular.json is the app angular cli configuration file.
Set ssl as true, ssl certificate key and cert path under the section serve-> configurations in angular,json.
any changes in angular.json requires the angular app to be stopped and restarted.

To make HttpRequests in Angular import the module HttpClientModule from "@angular/common/http" and add the HttpClientModule to the imports section in app.module file
Use the HttpClient class in app components to intiate http requests

In Angular usually ngOnInit method is used to add any additonal intializations tasks after Angular has intialized data bound properties in the constructor. To use this method we need to implement/inherit the OnInit lifecycle event of Angular in the class.

We can use interpolation to pass data from component to the view.(eg users object data in component.ts can be shown in view as {{users}})

*ngFor, *ngIf - These are structural directives that modify the DOM in html in some way
something without a * prefixed is a directive

Angular template forms are imported from FormsModule inside "@angular/forms". Add this to the imports sections in app.module file

To make a form an angular form we need to give a template reference variable # followed by any name and assigned ngForm (eg <form #loginForm="ngForm" (ngSubmit)="login()" >).  the ngSubmit tell the component method name that sould be called when submitting the form. In the example it is login() method.

For Two way binding an element needs to have the name attribute and the ngModel attribute(e.g. <input name="username" [(ngModel)] ="username" type="text" />). The [] brackets tells angular that the template is receiveing a data and the () brackets tells that data is send from template to the component.

Observables are new standard for managing async data. They are lazy collection of multiple values over time and different from promises which provides only single value, are not lazy and cannot be canceled inbetween. The observables can also be used with javascript map, filter, reduce and other operators.
To do something with observable they needs to be subscribed, otherwise it wont do anything.(e.g. http.get(url).subscribe(response => {data = response}, error => {log(error)}, () => {log(completed)});
A '| async' after an observable in a view template automatically subscribes and unsubscribes it without using any subscribe code.
By convention if naming an observable a $ sign is used at end(e.g. currentSource$)

Interface in typescript is different than interface in c#. In typescript it refers to a type of something. (e.g. export interface user{ username: string; token:string;} means a type of user object)

Parent to Child Component communication
@Input() is used to decorate a variable in the child component and this variable will be used in the parent component to pass data to child component.
In parent component template we need to specify this in [](e.g. <app-register [userFromHomeCompoent]="users"> where users is the model in parent component which has data)

Child to Parent Communication.
@Output is used to decorate the object variable of type EventEmitter in the child component.EventEmitter is which sends events from child to parent.(e.g. @Output cancelRegister = new EventEmitter();) then we need to define a method which defines what to emit in child component (e.g. cancel() { this.cancelRegister.emit(false));
In the parent component we need to specify the output variable and then a parent component method which recieves the event(e.g. <app-register (cancelRegister)="cancelRegisterMode($event)"> where cancelRegisterMode is a method in parent component which accepts and event argument.)

Routing
app-routing.module.ts (AppRoutingModule) is the module which angular uses for routing, this module is imported to app.module and created when we mark the option to add routing when creating angular project.

We add the routes to navigate to in the app-routing.module.ts routes property.
(e.g. consts routes:Routes = [ 
{path:'', component: HomeComponent}//this is root path,
 {path:'members', component:MemberListComponent},
 {path:'members/:id', component: MemberDetailComponent},
{path:'**', component:HomeComponent, pathMatch:'full'}]//this redirects any path that dont have a routes/ dont matches anything to home component)
The path-matching strategy, one of 'prefix' or 'full'. Default is 'prefix'.
By default, the router checks URL elements from the left to see if the URL matches a given path, and stops when there is a match. For example, '/team/11/user' matches 'team/:id'.
The path-match strategy 'full' matches against the entire URL. It is important to do this when redirecting empty-path routes. Otherwise, because an empty path is a prefix of any URL, the router would apply the redirect even when navigating to the redirect destination, creating an endless loop.

Add the selector <router-outlet></router-outlet> to the app.component.html to route to multiple pages based on url.
To navigate to a particular component which clickin on a lin add the 'routerLink' attribute (e.g. <a class="nav-link" routerLink ="/members" routerLinkActive="active" />)
The routerLinkActive highlights the link by addingan active class when the link is active.

To add router in code to navigate, Inject the Router Component in the constructor and use the this.router.navigateByUrl("/members"); to navigate to a component.

Angular Route Guard
This is used to guard the routes against unauthorised access. It automatically subscribes to any observables added in it.
To add guard to a route, add the 'canActivate;[AuthGuard]' attribute in the route. To add to multiple routes add a guard section in routing module and add the routes as children.

ngContainer is used to encapsulate html which should be rendered to page only if the condition is true. This helps to hide html that users dont want to see. (e.g.  <ng-container  *ngIf="currentUser$ | async">)

Angular pipes is used to format/alter the data (e.g. {{user.username | titelcase}} where titlecase is an angular pipe method to change username to titlecase)